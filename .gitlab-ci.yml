# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

default:
  image: golang:1.19

stages:
- verify
- test

include:
- template: Security/SAST.gitlab-ci.yml
#- template: Jobs/Dependency-Scanning.gitlab-ci.yml # requires Ultimate

sast:
  stage: verify

#dependency_scanning: # requires ultimate
#  stage: verify

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: verify
  script:
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

commitlint:
  stage: verify
  image: node:14-alpine3.12
  before_script:
  - apk add --no-cache git
  - npm install
  script:
  - npx commitlint --from ${CI_MERGE_REQUEST_DIFF_BASE_SHA} --to HEAD --verbose
  rules:
  - if: $CI_MERGE_REQUEST_IID

test:
  stage: test
  script:
  - go test -race ./...

coverage:
  stage: test
  script:
  - go test -v -coverpkg=./... -coverprofile=coverage.txt -covermode count ./...
  - go get github.com/boumenot/gocover-cobertura
  - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
  - go tool cover -func coverage.txt
  coverage: /^total:.*statements.*(\d+\.?\d*)%/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml